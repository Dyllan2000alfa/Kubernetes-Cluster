apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: heimdall-nvme
  namespace: democratic-csi
spec:
  interval: 15m
  chart:
    spec:
      chart: democratic-csi
      version: 0.14.7
      sourceRef:
        kind: HelmRepository
        name: democratic-csi
        namespace: flux-system
        interval: 15m
    timeout: 20m
    maxHistory: 3
    driftDetection:
      mode: warn
    install:
      createNamespace: true
      remediation:
        retries: 3
    upgrade:
      cleanupOnFail: true
      remediation:
        retries: 3
    uninstall:
      keepHistory: false
    values:
      csiDriver:
        # should be globally unique for a given cluster
        name: "org.democratic-csi.heimdall-nvmeof"

      # add note here about volume expansion requirements
      storageClasses:
        - name: heimdall-nvmeof-csi
          defaultClass: false
          reclaimPolicy: Delete
          volumeBindingMode: Immediate
          allowVolumeExpansion: true
          parameters:
            # for block-based storage can be ext3, ext4, xfs
            # for nfs should be nfs
            fsType: ext4

            # if true, volumes created from other snapshots will be
            # zfs send/received instead of zfs cloned
            detachedVolumesFromSnapshots: "false"

            # if true, volumes created from other volumes will be
            # zfs send/received instead of zfs cloned
            # detachedVolumesFromVolumes: "false"

          mountOptions: []
          secrets:
            provisioner-secret:
            controller-publish-secret:
            node-stage-secret:
            node-publish-secret:
            controller-expand-secret:

      # if your cluster supports snapshots you may enable below
      volumeSnapshotClasses: []
      - name: heimdall-nvmeof-csi
        parameters:
        # if true, snapshots will be created with zfs send/receive
          detachedSnapshots: "true"
        secrets:
          snapshotter-secret:

      driver:
        config:
          driver: zfs-generic-nvmeof
          sshConnection:
            host: 10.1.0.63
            port: 22
            username: root
            # use either password or key
            privateKey: ${PROXMOX_KEY}

          zfs:
            # can be used to override defaults if necessary
            # the example below is useful for TrueNAS 12
            cli:
              #  sudoEnabled: true
              paths:
                zfs: /usr/sbin/zfs
                zpool: /usr/sbin/zpool
                sudo: /usr/bin/sudo
                chroot: /usr/sbin/chroot

            # can be used to set arbitrary values on the dataset/zvol
            # can use handlebars templates with the parameters from the storage class/CO
            datasetProperties:
              "org.freenas:description": "{{ parameters.[csi.storage.k8s.io/pvc/namespace] }}/{{ parameters.[csi.storage.k8s.io/pvc/name] }}"

            datasetParentName: Heimdall/k8s/main-cluster/nvme/pvc
            # do NOT make datasetParentName and detachedSnapshotsDatasetParentName overlap
            # they may be siblings, but neither should be nested in the other
            detachedSnapshotsDatasetParentName: Heimdall/k8s/main-cluster/nvme/snapshot

            # "" (inherit), lz4, gzip-9, etc
            zvolCompression: inherit
            # "" (inherit), on, off, verify
            zvolDedup: inherit
            zvolEnableReservation: false
            # 512, 1K, 2K, 4K, 8K, 16K, 64K, 128K default is 16K
            zvolBlocksize: 4K

          nvmeof:
            # these are for the node/client aspect
            transports:
              - tcp://10.1.0.63:4420
              #- "tcp://127.0.0.1:4420?host-iface=eth0"
              #- "tcp://[2001:123:456::1]:4420"
              #- "rdma://127.0.0.1:4420"
              #- "fc://[nn-0x203b00a098cbcac6:pn-0x203d00a098cbcac6]"

            # MUST ensure uniqueness
            # full iqn limit is 223 bytes, plan accordingly
            # default is "{{ name }}"
            nameTemplate: "{{ parameters.[csi.storage.k8s.io/pvc/namespace] }}-{{ parameters.[csi.storage.k8s.io/pvc/name] }}"
            namePrefix: csi-
            nameSuffix: -cluster

            shareStrategy: "nvmetCli"
            #shareStrategy: "spdkCli"

            # https://documentation.suse.com/es-es/sles/15-SP1/html/SLES-all/cha-nvmeof.html
            # https://www.linuxjournal.com/content/data-flash-part-iii-nvme-over-fabrics-using-tcp
            # http://git.infradead.org/users/hch/nvmetcli.git
            shareStrategyNvmetCli:
              #sudoEnabled: true
              # /root/.local/bin/nvmetcli
              nvmetcliPath: nvmetcli
              # prevent startup race conditions by ensuring the config on disk has been imported
              # before we start messing with things
              configIsImportedFilePath: /var/run/nvmet-config-loaded
              configPath: /etc/nvmet/config.json
              basename: "nqn.2003-01.org.linux-nvme"
              # add more ports here as appropriate if you have multipath
              ports:
                - "1"
              subsystem:
                attributes:
                  allow_any_host: 1
              # not supported yet in nvmetcli
              #namespace:
              #  attributes:
              #    buffered_io: 1

            shareStrategySpdkCli:
              # spdkcli.py
              #spdkcliPath: spdkcli
              configPath: /etc/spdk/spdk.json
              basename: "nqn.2003-01.org.linux-nvmeof"
              bdev:
                type: uring
                #type: aio
                attributes:
                  block_size: 512
              subsystem:
                attributes:
                  allow_any_host: "true"
              listeners:
                - trtype: tcp
                  traddr: server
                  trsvcid: port
                  adrfam: ipv4